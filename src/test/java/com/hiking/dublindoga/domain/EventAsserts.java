package com.hiking.dublindoga.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllPropertiesEquals(Event expected, Event actual) {
        assertEventAutoGeneratedPropertiesEquals(expected, actual);
        assertEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllUpdatablePropertiesEquals(Event expected, Event actual) {
        assertEventUpdatableFieldsEquals(expected, actual);
        assertEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAutoGeneratedPropertiesEquals(Event expected, Event actual) {
        assertThat(actual)
            .as("Verify Event auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableFieldsEquals(Event expected, Event actual) {
        assertThat(actual)
            .as("Verify Event relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getDifficulty()).as("check difficulty").isEqualTo(expected.getDifficulty()))
            .satisfies(a -> assertThat(a.getPhoto1()).as("check photo1").isEqualTo(expected.getPhoto1()))
            .satisfies(a -> assertThat(a.getPhoto1ContentType()).as("check photo1 contenty type").isEqualTo(expected.getPhoto1ContentType())
            )
            .satisfies(a -> assertThat(a.getPhoto2()).as("check photo2").isEqualTo(expected.getPhoto2()))
            .satisfies(a -> assertThat(a.getPhoto2ContentType()).as("check photo2 contenty type").isEqualTo(expected.getPhoto2ContentType())
            )
            .satisfies(a -> assertThat(a.getPhoto3()).as("check photo3").isEqualTo(expected.getPhoto3()))
            .satisfies(a -> assertThat(a.getPhoto3ContentType()).as("check photo3 contenty type").isEqualTo(expected.getPhoto3ContentType())
            )
            .satisfies(a -> assertThat(a.getLimit()).as("check limit").isEqualTo(expected.getLimit()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableRelationshipsEquals(Event expected, Event actual) {
        assertThat(actual)
            .as("Verify Event relationships")
            .satisfies(a -> assertThat(a.getPendingJoiners()).as("check pendingJoiners").isEqualTo(expected.getPendingJoiners()))
            .satisfies(a -> assertThat(a.getApprovedJoiners()).as("check approvedJoiners").isEqualTo(expected.getApprovedJoiners()));
    }
}
