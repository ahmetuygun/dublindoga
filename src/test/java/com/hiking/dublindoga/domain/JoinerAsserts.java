package com.hiking.dublindoga.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class JoinerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJoinerAllPropertiesEquals(Joiner expected, Joiner actual) {
        assertJoinerAutoGeneratedPropertiesEquals(expected, actual);
        assertJoinerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJoinerAllUpdatablePropertiesEquals(Joiner expected, Joiner actual) {
        assertJoinerUpdatableFieldsEquals(expected, actual);
        assertJoinerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJoinerAutoGeneratedPropertiesEquals(Joiner expected, Joiner actual) {
        assertThat(actual)
            .as("Verify Joiner auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJoinerUpdatableFieldsEquals(Joiner expected, Joiner actual) {
        assertThat(actual)
            .as("Verify Joiner relevant properties")
            .satisfies(a -> assertThat(a.getFullName()).as("check fullName").isEqualTo(expected.getFullName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPhoto1()).as("check photo1").isEqualTo(expected.getPhoto1()))
            .satisfies(a -> assertThat(a.getPhoto1ContentType()).as("check photo1 contenty type").isEqualTo(expected.getPhoto1ContentType())
            )
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getPoint()).as("check point").isEqualTo(expected.getPoint()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJoinerUpdatableRelationshipsEquals(Joiner expected, Joiner actual) {
        assertThat(actual)
            .as("Verify Joiner relationships")
            .satisfies(a -> assertThat(a.getPendingEvents()).as("check pendingEvents").isEqualTo(expected.getPendingEvents()))
            .satisfies(a -> assertThat(a.getAprovedEvents()).as("check aprovedEvents").isEqualTo(expected.getAprovedEvents()));
    }
}
